"use client";

import { useState, useEffect } from "react";
import ChessBoard from "@/components/ChessboardWrapper";
import PositionControls from "@/components/PositionControls";
import Loader from "@/components/loader";

const startFen = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"; // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è

const ChessPage = () => {
  const [fen, setFen] = useState<string>(startFen);
  const [positionNameEn, setPositionNameEn] = useState<string>("");
  const [positionNameRu, setPositionNameRu] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);
  const [buttonVariant, setButtonVariant] = useState<"neutral" | "decline" | "agree">("neutral");
  const [buttonText, setButtonText] = useState<string>("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é");
  const [positionId, setPositionId] = useState<number | null>(null);
  const [apiError, setApiError] = useState<string | null>(null);

  // üöÄ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ FEN
  const fetchPosition = async (fen: string) => {
    setLoading(true);
    setApiError(null);

    try {
      console.log(`üîç –ó–∞–ø—Ä–æ—Å –∫ API: /api/openings/search`);
      const response = await fetch("/api/openings/search", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ fen }),
      });

      const data = await response.json();
      console.log("üì© –û—Ç–≤–µ—Ç API:", data);

      if (response.ok && data.name_en) {
        setPositionId(data.id);
        setPositionNameEn(data.name_en);
        setPositionNameRu(data.name_ru);
        setButtonVariant("neutral");
        setButtonText("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é");
      } else {
        console.warn(`‚ö†Ô∏è API –Ω–µ –Ω–∞—à—ë–ª –∑–∞–ø–∏—Å—å –¥–ª—è FEN: ${fen}`);
        setPositionId(null);
        setButtonVariant("decline");
        setButtonText("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:", error);
      setApiError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
    }

    setLoading(false);
  };

  // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    fetchPosition(startFen);
  }, []);

  // üîÑ –í—ã–∑—ã–≤–∞–µ–º `fetchPosition` –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ `fen`
  useEffect(() => {
    if (fen !== startFen) {
      fetchPosition(fen);
    }
  }, [fen]);

  // üìù –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
  const savePosition = async () => {
    if (!fen || (!positionNameEn && !positionNameRu)) return;

    try {
      console.log(`üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–ª—è FEN: ${fen}`);
      const responseCheck = await fetch("/api/openings/search", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ fen }),
      });

      const dataCheck = await responseCheck.json();
      console.log("üìå –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏:", dataCheck);

      if (dataCheck.id) {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ID: ${dataCheck.id}`);
        await fetch(`/api/openings/${dataCheck.id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name_en: positionNameEn, name_ru: positionNameRu, fen }),
        });
        setButtonVariant("agree");
        setButtonText("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ");
      } else {
        console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è FEN: ${fen}`);
        await fetch("/api/openings", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name_en: positionNameEn, name_ru: positionNameRu, fen }),
        });
        setButtonVariant("agree");
        setButtonText("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:", error);
      setApiError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
    }
  };

  return (
    <div className="flex flex-col items-center">
      <ChessBoard fen={fen} onFenChange={setFen} />
      <PositionControls {...{ positionNameEn, positionNameRu, setPositionNameEn, setPositionNameRu, onSave: savePosition, buttonVariant, buttonText }} />
      <Loader loading={loading} />
    </div>
  );
};

export default ChessPage;
