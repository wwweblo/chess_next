import { NextResponse } from "next/server";
import sqlite3 from "sqlite3";
import { open } from "sqlite";

// üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
async function connectDB() {
  return open({
    filename: "./src/data/chess_openings.db",
    driver: sqlite3.Database,
  });
}

// üìå API –ø–æ–∏—Å–∫–∞ –ø–æ FEN (POST /api/openings/search)
export async function POST(req: Request) {
  try {
    const { fen } = await req.json();

    if (!fen) {
      return NextResponse.json({ error: "–ù–µ —É–∫–∞–∑–∞–Ω FEN-–∫–æ–¥" }, { status: 400 });
    }

    console.log(`üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ —Å FEN: ${fen}`);

    const db = await connectDB();
    const result = await db.get("SELECT id, name_en, name_ru FROM openings WHERE fen = ?", [fen]);
    await db.close();

    if (!result) {
      console.warn(`‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å FEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${fen}`);
      return NextResponse.json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }, { status: 404 });
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å:`, result);
    return NextResponse.json(result);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ:", error);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ" }, { status: 500 });
  }
}
