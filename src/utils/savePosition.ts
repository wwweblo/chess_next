export const checkPositionExists = async (fen: string) => {
    try {
      console.log(`üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–ª—è FEN: ${fen}`);
      const response = await fetch("/api/openings/search", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ fen }),
      });
  
      const data = await response.json();
      console.log("üìå –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏:", data);
  
      return data.id ? data : null;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏:", error);
      return null;
    }
  };
  
  export const updatePosition = async (id: number, nameEn: string, nameRu: string, fen: string) => {
    try {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ID: ${id}`);
      await fetch(`/api/openings/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name_en: nameEn, name_ru: nameRu, fen }),
      });
  
      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:", error);
      return false;
    }
  };
  
  export const createPosition = async (nameEn: string, nameRu: string, fen: string) => {
    try {
      console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è FEN: ${fen}`);
      await fetch("/api/openings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name_en: nameEn, name_ru: nameRu, fen }),
      });
  
      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:", error);
      return false;
    }
  };
  
  // üìù –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
  export const savePosition = async (
    fen: string,
    positionNameEn: string,
    positionNameRu: string,
    setButtonVariant: (variant: "neutral" | "decline" | "agree") => void,
    setButtonText: (text: string) => void,
    setApiError: (error: string | null) => void
  ) => {
    if (!fen || (!positionNameEn && !positionNameRu)) return;
  
    try {
      const existingPosition = await checkPositionExists(fen);
  
      if (existingPosition) {
        const updated = await updatePosition(existingPosition.id, positionNameEn, positionNameRu, fen);
        if (updated) {
          setButtonVariant("agree");
          setButtonText("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ");
        }
      } else {
        const created = await createPosition(positionNameEn, positionNameRu, fen);
        if (created) {
          setButtonVariant("agree");
          setButtonText("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ");
        }
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:", error);
      setApiError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
    }
  };
  